stages:
  - test
  - build
  - deploy

variables:
  ENVIRONMENT_QA: "qa"
  ENVIRONMENT_UAT: "uat"
  ENVIRONMENT_STAGE: "stage"
  ENVIRONMENT_PROD: "prod"

audit:
  stage: test
  image:
    name: $DOCKER_IMAGE_NODE_18
  script:
    - npm audit
  tags:
    - avenga-light
  when: manual
  allow_failure: true

# Run unit/integration testing
Tests:
  stage: test
  image:
    name: $DOCKER_IMAGE_NODE_18
  script:
    # - apk add --no-cache python3 make g++
    - npm i --unsafe-perm=true
    - npm test
  tags:
    - avenga-light

Tests-Coverage:
  stage: test
  image: $DOCKER_IMAGE_NODE_18
  before_script:
    - apk add curl    
  script:
    - npm i --unsafe-perm=true
    - |
      PercentCovered=$(npm run test:cov | grep "All files" | awk '{print ($4+$6+$8+$10)/4, "% covered"}')
      echo $PercentCovered
      ExpectCount=$(grep -ros 'expect(' . | wc -l)
      echo $ExpectCount
      if [[ ${SEND_SLACK_NOTIFICATION:+1} ]]; then
        if [[ $CODE_COVERAGE_SLACK_CHANNEL == "#oce-location-leads" ]]; then
          cur_day=$(date +%A)
          if [[ ! $cur_day =~ Sunday|Wednesday ]]; then
            echo "Skipping code coverage message because it's allowed to be sent only on Sunday or Wednesday."
            exit #continue
          fi
        fi
        SLACK_NOTIFICATION_MESSAGE="Activity Rsvp Service Code Coverage *${CI_COMMIT_REF_NAME}* - $PercentCovered \n expectCount: ${ExpectCount} \n Job: ${CI_JOB_URL} \n Pipeline: ${CI_PIPELINE_URL} \n"
        curl -s -X POST --data-urlencode "payload={\"username\":\"gitlab\", \"channel\":\"${CODE_COVERAGE_SLACK_CHANNEL}\", \"text\":\"$SLACK_NOTIFICATION_MESSAGE\" }" ${CODE_COVERAGE_SLACK_URL};
      fi  
  tags:
    - avenga-light


# Build Docker image, push to AWS ECS registry and tag by commit hash and env
.build-push-image-abstract: &build-push-image-template
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.14.0
    entrypoint: [""]
  script:
    - echo $CI_PROJECT_DIR
    - echo $REGISTRY_IMAGE
    - echo $CI_COMMIT_SHORT_SHA
    - |
      echo "{\"credsStore\": \"ecr-login\"}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $REGISTRY_IMAGE:${ENVIRONMENT:-dev} --destination $REGISTRY_IMAGE:$CI_COMMIT_SHA
  tags:
    - avenga-light


Build QA EU:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_QA
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
  only:
    - OCE-131935-nodejs-v18

Build UAT EU:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_UAT
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
  only:
    - uat

Build UAT US:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_UAT
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
  only:
    - uat

Build Stage EU:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_STAGE
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
  only:
    - staging

Build Stage US:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_STAGE
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
  only:
    - staging

Build Prod EU:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_PROD
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
  only:
    - master

Build Prod US:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: $ENVIRONMENT_PROD
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
  only:
    - master

# Update AWS intrustructure
# This could even spin up entirely new intrustructure with VPC, SGs, public and private subnets,  
# Internet Gateway, NAT Gateway, LBs (application and network), ECS cluster, service, task definition, IAM role
.update-ecs-abstract: &update-ecs-template
  stage: deploy
  image: 
    name: ${DOCKER_IMAGE_TERRAFORM}
    entrypoint: [""]
  before_script:
    - cd terraform/environments/$ENVIRONMENT
    - export TF_IN_AUTOMATION=1
    - export TF_VAR_aws_ecr_image_url="$REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - export TF_VAR_autoscale_enabled="true"
  script:
    - export TF_VAR_config_service_api_key=$CONFIG_SERVICE_API_KEY
    - export TF_VAR_config_service_url=$CONFIG_SERVICE_URL
    - export TF_VAR_crypto_key=$CRYPTO_KEY
    - export TF_VAR_crypto_algo=$CRYPTO_ALGORITHM
    - export TF_VAR_SLACK_CHANNEL=$SLACK_CHANNEL
    - export TF_VAR_SLACK_NOTIFICATION_URL=$SLACK_NOTIFICATION_URL
    - export TF_VAR_SLACK_USERNAME=$SLACK_USERNAME
    - echo "$SLACK_CHANNEL"
    - terraform init
    - terraform workspace new $REGION || true
    - terraform workspace select $REGION
    - terraform plan -out=tfplan -var "region=$REGION" -var-file $REGION.tfvars
    - |
      if [ ${TFRunApply} == "TRUE" ]
      then
        terraform apply "tfplan"
      else
        echo "Terraform command 'apply' is skipped"
      fi
  tags:
    - avenga-light

.qa-variables-abstract: &qa-variables-temlate
    CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_QA
    CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_QA
    CRYPTO_KEY: $CRYPTO_KEY_QA
    CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_QA
    ENVIRONMENT: $ENVIRONMENT_QA
    SLACK_CHANNEL: $SLACK_CHANNEL_QA
    SLACK_NOTIFICATION_URL: $SLACK_NOTIFICATION_URL_QA
    SLACK_USERNAME: $SLACK_USER_NAME

Deploy QA EU plan:
  <<: *update-ecs-template
  variables:
    <<: *qa-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "FALSE"
  only:
    - dev

Deploy QA EU apply:
  <<: *update-ecs-template
  variables:
    <<: *qa-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "TRUE"
  only:
    - dev
  when: manual

.uat-variables-abstract: &uat-variables-temlate
    CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_UAT
    CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_UAT
    CRYPTO_KEY: $CRYPTO_KEY_QA
    CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_QA
    ENVIRONMENT: $ENVIRONMENT_UAT
    SLACK_CHANNEL: $SLACK_CHANNEL_UAT
    SLACK_NOTIFICATION_URL: $SLACK_NOTIFICATION_URL_UAT
    SLACK_USERNAME: $SLACK_USER_NAME

Deploy UAT EU plan:
  <<: *update-ecs-template
  variables:
    <<: *uat-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "FALSE"
  only:
    - uat

Deploy UAT EU apply:
  <<: *update-ecs-template
  variables:
    <<: *uat-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "TRUE"
  only:
    - uat
  when: manual

Deploy UAT US plan:
  <<: *update-ecs-template
  variables:
    <<: *uat-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "FALSE"
  only:
    - uat

Deploy UAT US apply:
  <<: *update-ecs-template
  variables:
    <<: *uat-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "TRUE"
  only:
    - uat
  when: manual

# Production
.prod-variables-abstract: &prod-variables-temlate
    ENVIRONMENT: $ENVIRONMENT_PROD
    CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_PROD
    CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_PROD
    CRYPTO_KEY: $CRYPTO_KEY_PROD
    CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_PROD
    SLACK_CHANNEL: $SLACK_CHANNEL_PROD
    SLACK_NOTIFICATION_URL: $SLACK_NOTIFICATION_URL_PROD
    SLACK_USERNAME: $SLACK_USER_NAME

Deploy Prod US plan:
  <<: *update-ecs-template
  variables:
    <<: *prod-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "FALSE"
  only:
    - master

Deploy Prod US apply:
  <<: *update-ecs-template
  variables:
    <<: *prod-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "TRUE"
  only:
    - master
  when: manual

Deploy Prod EU plan:
  <<: *update-ecs-template
  variables:
    <<: *prod-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "FALSE"
  only:
    - master

Deploy Prod EU apply:
  <<: *update-ecs-template
  variables:
    <<: *prod-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "TRUE"
  only:
    - master
  when: manual

#--- Staging
.stage-variables-abstract: &stage-variables-temlate
    ENVIRONMENT: $ENVIRONMENT_STAGE
    CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_STAGE
    CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_STAGE
    CRYPTO_KEY: $CRYPTO_KEY_STAGE
    CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_STAGE
    SLACK_CHANNEL: $SLACK_CHANNEL_STAGE
    SLACK_NOTIFICATION_URL: $SLACK_NOTIFICATION_URL_STAGE
    SLACK_USERNAME: $SLACK_USER_NAME

Deploy Stage US plan:
  <<: *update-ecs-template
  variables:
    <<: *stage-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "FALSE"
  only:
    - staging

Deploy Stage US apply:
  <<: *update-ecs-template
  variables:
    <<: *stage-variables-temlate
    REGION: "us-west-2"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_US
    TFRunApply: "TRUE"
  only:
    - staging
  when: manual

Deploy Stage EU plan:
  <<: *update-ecs-template
  variables:
    <<: *stage-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "FALSE"
  only:
    - staging

Deploy Stage EU apply:
  <<: *update-ecs-template
  variables:
    <<: *stage-variables-temlate
    REGION: "eu-west-1"
    REGISTRY_IMAGE: $REGISTRY_IMAGE_EU
    TFRunApply: "TRUE"
  only:
    - staging
  when: manual
