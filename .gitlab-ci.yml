stages:
  - test
  - build
  - deploy

# Run unit/integration testing
Tests:
  stage: test
  image:
    name: node:12-alpine
  script:
    - npm i --unsafe-perm=true
    - npm test
  tags:
    - "694723881910"


# Build Docker image, push to AWS ECS registry and tag by commit hash and env
.build-push-image-abstract: &build-push-image-template
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.14.0
    entrypoint: [""]
  script:
    - echo $CI_PROJECT_DIR
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_COMMIT_TAG
    - |
      echo "{\"credsStore\": \"ecr-login\"}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:${ENVIRONMENT:-qa} --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  tags:
    - "694723881910"

Build Dev:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: "dev"
  only:
    - dev

# Build Qa:
#   <<: *build-push-image-template
#   variables:
#     ENVIRONMENT: "qa"
#   only:
#     - dev

Build Prod:
  <<: *build-push-image-template
  variables:
    ENVIRONMENT: "prod"
  only:
    - master

# Update AWS intrustructure
# This could even spin up entirely new intrustructure with VPC, SGs, public and private subnets,  
# Internet Gateway, NAT Gateway, LBs (application and network), ECS cluster, service, task definition, IAM role
.update-ecs-abstract: &update-ecs-template
  stage: deploy
  image: 
    name: hashicorp/terraform:0.13.5
    entrypoint: [""]
  before_script:
    - cd terraform/environments/$ENVIRONMENT
    - export TF_IN_AUTOMATION=1
    - export TF_VAR_aws_ecr_image_tag=$CI_COMMIT_SHA
    - export TF_VAR_autoscale_enabled="true"
  script:
    - export TF_VAR_config_service_api_key=$CONFIG_SERVICE_API_KEY
    - export TF_VAR_config_service_url=$CONFIG_SERVICE_URL
    - export TF_VAR_crypto_key=$CRYPTO_KEY
    - export TF_VAR_crypto_algo=$CRYPTO_ALGORITHM
    - export TF_VAR_sf_api_endpoint=$SFAPI_ENDPOINT

    - terraform init
    - terraform workspace new $REGION || true
    - terraform workspace select $REGION
    - terraform plan -out=tfplan -var "region=$REGION" -var-file $REGION.tfvars
    - terraform apply tfplan
  tags:
    - "694723881910"

Deploy Dev EU:
  <<: *update-ecs-template
  variables:
    CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_DEV
    CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_DEV
    CRYPTO_KEY: $CRYPTO_KEY_DEV
    CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_DEV
    SFAPI_ENDPOINT: $SFAPI_ENDPOINT_DEV

    REGION: "eu-west-1"
    ENVIRONMENT: "dev"
  only:
    - dev


# # QA
# .qa-variables-abstract: &qa-variables-temlate
#     ENVIRONMENT: "qa"
#     CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_QA
#     CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_QA
#     CRYPTO_KEY: $CRYPTO_KEY_QA
#     CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_QA
#     SFAPI_ENDPOINT: $SFAPI_ENDPOINT_QA

# Deploy QA US:
#   <<: *update-ecs-template
#   variables:
#     <<: *qa-variables-temlate
#     REGION: "us-east-1"
#   only:
#     - dev

# Deploy QA EU:
#   <<: *update-ecs-template
#   variables:
#     <<: *qa-variables-temlate
#     REGION: "eu-west-1"
#   only:
#     - dev


# # Production
# .prod-variables-abstract: &prod-variables-temlate
#     ENVIRONMENT: "prod"
#     CONFIG_SERVICE_API_KEY: $CONFIG_SERVICE_API_KEY_PROD
#     CONFIG_SERVICE_URL: $CONFIG_SERVICE_URL_PROD
#     CRYPTO_KEY: $CRYPTO_KEY_PROD
#     CRYPTO_ALGORITHM: $CRYPTO_ALGORITHM_PROD
#     SFAPI_ENDPOINT: $SFAPI_ENDPOINT_PROD

# Deploy Prod US:
#   <<: *update-ecs-template
#   variables:
#     <<: *prod-variables-temlate
#     REGION: "us-east-1"
#   only:
#     - master

# Deploy Prod EU:
#   <<: *update-ecs-template
#   variables:
#     <<: *prod-variables-temlate
#     REGION: "eu-west-1"
#   only:
#     - master
